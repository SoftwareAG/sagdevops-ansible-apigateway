---

  - debug: var=rvar_apigateway_api verbosity=1
  
  - name: fail if mandatory params not specified
    fail: 
      msg: "A mandatory param was not defined, cannot do anything."
    when: item is not defined
    with_items:
      - "{{ rvar_apigateway_api }}"
      - "{{ rvar_apigateway_api.name }}"
      - "{{ rvar_apigateway_api.version }}"

  - name: First, get the object id based on the filter (returned in var rest_response_object_id)
    include_tasks: "find_single_id.yml"
    vars:
      rvar_object_filter:
        name: "{{ rvar_apigateway_api.name }}"
        version: "{{ rvar_apigateway_api.version }}"

  - name: Assign returned object id to custom var
    set_fact:
      currentobj_id: "{{ rest_response_object_id }}"
  
  - name: Update the existing api if it existed (ie. if the currentobj_id is not empty)
    block:

      - name: Get api
        include_tasks: "get.yml"
        vars:
          rvar_apigateway_api_id: "{{ currentobj_id }}"
         
      - name: Create the initial update dictionary
        set_fact:
          existing_object: "{{ rest_response_object.apiResponse.api }}"
          rvar_apigateway_api_toupdate: {}
        
      - debug: var=existing_object verbosity=1

      - name: Overwrite the existing object with the values to update 
        set_fact:
          existing_object: "{{ existing_object | combine(rvar_apigateway_api,recursive=True) }}"

      - name: Build the final update dict, starting with the existing_object, removing the fields we don't need/want in the process
        set_fact:
          rvar_apigateway_api_toupdate: "{{ rvar_apigateway_api_toupdate | combine({item.key: item.value}) }}"
        when: item.key not in ['id']
        with_dict: "{{ existing_object }}"

      - debug: var=rvar_apigateway_api_toupdate verbosity=1

      - name: Update the existing api object
        uri:
          url: "{{ apigateway_rest_apis_api }}/{{ currentobj_id }}"
          method: PUT
          user: "{{ apigateway_rest_login_username }}"
          password: "{{ apigateway_rest_login_password }}"
          return_content: yes
          body: "{{ rvar_apigateway_api_toupdate | to_json }}"
          force_basic_auth: yes
          validate_certs: "{{ not ( apigateway_rest_no_check_certs | default() | bool ) }}"
          status_code: [200, 201]
          body_format: json
          timeout: 30
        register: rest_response_mutate_update
        
      - name: Response for new updated api
        debug: var=rest_response_mutate_update verbosity=1

    when: currentobj_id is defined and currentobj_id != ""

  - name: Create a new api if it does not exist (ie. if the currentobj_id is empty)
    block:

      - name: Create a new api object
        uri:
          url: "{{ apigateway_rest_apis_api }}"
          method: POST
          user: "{{ apigateway_rest_login_username }}"
          password: "{{ apigateway_rest_login_password }}"
          return_content: yes
          body: "{{ rvar_apigateway_api | default({}) | to_json }}"
          force_basic_auth: yes
          validate_certs: "{{ not ( apigateway_rest_no_check_certs | default() | bool ) }}"
          status_code: [200, 201]
          body_format: json
          timeout: 30
        register: rest_response_mutate_create

      - name: Response for new created api
        debug: var=rest_response_mutate_create verbosity=1
      
      - name: Assign the currentobj_id value to be consistent with the create
        set_fact:
          currentobj_id: "{{ rest_response_mutate_create.json.id }}"

    when: currentobj_id is not defined or currentobj_id == ""

  - debug:
      msg: "Final Object ID added/updated: {{ currentobj_id }}"
      verbosity: 1
