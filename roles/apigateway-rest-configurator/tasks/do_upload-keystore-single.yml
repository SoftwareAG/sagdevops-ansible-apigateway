---


  - debug: var=rvar_apigateway_keystore_item verbosity=1

  - name: fail if rvar_apigateway_keystore_item.keyStoreName not specified or empty
    fail: 
      msg: "rvar_apigateway_keystore_item.keyStoreName is not specified or empty...cannot do anything."
    when: rvar_apigateway_keystore_item.keyStoreName is not defined or rvar_apigateway_keystore_item.keyStoreName | trim == ""

  - name: fail if rvar_apigateway_keystore_item.keyStoreName contains invalid chars
    fail: 
      msg: "rvar_apigateway_keystore_item.keyStoreName contains invalid characters..."
    when: (rvar_apigateway_keystore_item.keyStoreName | regex_search('^[0-9a-zA-Z_]+$')) is none

  - name: Get current API Gateway keystore
    uri:
      url: "{{ apigateway_rest_is_keystore }}"
      method: GET
      user: "{{ apigateway_rest_login_username }}"
      password: "{{ apigateway_rest_login_password }}"
      return_content: yes
      force_basic_auth: yes
      validate_certs: "{{ not ( apigateway_rest_no_check_certs | default() | bool ) }}"
      status_code: [200]
      body_format: json
      timeout: 30
    register: get_all_keystores

  - name: Response for All Current keystores
    debug: var=get_all_keystores verbosity=1

  - name: Parse response and extract name fields
    set_fact:
      get_all_keystore_names: "{{ lookup('template', 'apigateway_restapi_get_keystore_names.json.j2') }}"

  - name: All current keystore names
    debug: var=get_all_keystore_names verbosity=1

  - name: If new keystore data does not exist, then URI is the generic one
    set_fact:
      curl_wrapper_target_uri: "{{ apigateway_rest_is_keystore }}"
    when: not rvar_apigateway_keystore_item.keyStoreName in get_all_keystore_names

  - name: If new keystore data already exists, then URI contains the name of the keystore
    set_fact:
      curl_wrapper_target_uri: "{{ apigateway_rest_is_keystore }}/{{ rvar_apigateway_keystore_item.keyStoreName }}"
    when: rvar_apigateway_keystore_item.keyStoreName in get_all_keystore_names

  - name: the identified curl uri based on same keystore exist or not...
    debug: var=curl_wrapper_target_uri verbosity=1

  # TODO: need to work on this...body structure is not the same as curl!!
  # - name: tasks for newer versions of ansible that support form-multipart
  #   block:

  #     - name: Upload new keystore to apigateway using uri module
  #       uri:
  #         url: "{{ curl_wrapper_target_uri }}"
  #         method: POST
  #         user: "{{ apigateway_rest_login_username }}"
  #         password: "{{ apigateway_rest_login_password }}"
  #         return_content: yes
  #         force_basic_auth: yes
  #         validate_certs: "{{ not ( apigateway_rest_no_check_certs | default() | bool ) }}"
  #         status_code: [200]
  #         body: "{{ rvar_apigateway_keystore | default({},true) }}"
  #         body_format: form-multipart
  #         timeout: 30
  #       register: update_keystore

  #     - debug: var=update_keystore verbosity=1

  #     - name: Once keystore has been added, it now exists so let's add the keystore name to the URI
  #       set_fact:
  #         curl_wrapper_target_uri: "{{ apigateway_rest_is_keystore }}/{{ rvar_apigateway_keystore_item.keyStoreName }}"

  #     - name: Update keystore key aliases passwords using uri module
  #       uri:
  #         url: "{{ curl_wrapper_target_uri }}"
  #         method: POST
  #         user: "{{ apigateway_rest_login_username }}"
  #         password: "{{ apigateway_rest_login_password }}"
  #         return_content: yes
  #         force_basic_auth: yes
  #         validate_certs: "{{ not ( apigateway_rest_no_check_certs | default() | bool ) }}"
  #         status_code: [200]
  #         body: "{{ keystore_keyalias_formdata_fields_item }}"
  #         body_format: form-multipart
  #         timeout: 30
  #       register: update_keystore_aliases
  #       with_items: "{{ rvar_apigateway_keystore_item.keyaliases }}"
  #       loop_control:
  #         loop_var: keystore_keyalias_formdata_fields_item

  #     - debug: var=update_keystore_aliases verbosity=1

  #   when: ansible_version.major > 2 or (ansible_version.major == 2 and ansible_version.minor >= 10)

  - name: tasks for older versions of ansible that do not support form-multipart
    block:

      - name: Upload new keystore to apigateway using curl wrapper
        include_role:
          name: curl-wrapper
        vars:
          command: upload-multipart-formdata
          curl_wrapper_basicauth_user: "{{ apigateway_rest_login_username }}"
          curl_wrapper_basicauth_password: "{{ apigateway_rest_login_password }}"
          curl_wrapper_no_check_certs: "{{ apigateway_rest_no_check_certs }}"
          curl_wrapper_multipart_formdata_fields: "{{ rvar_apigateway_keystore }}"
          curl_wrapper_headers_fields:
            "Accept": "application/json"

      # - name: Once keystore has been added, it now exists so let's add the keystore name to the URI
      #   set_fact:
      #     curl_wrapper_target_uri: "{{ apigateway_rest_is_keystore }}/{{ rvar_apigateway_keystore_item.keyStoreName }}"

      # - name: Update keystore key aliases passwords using curl wrapper
      #   include_role:
      #     name: curl-wrapper
      #   vars:
      #     command: upload-multipart-formdata
      #     curl_wrapper_basicauth_user: "{{ apigateway_rest_login_username }}"
      #     curl_wrapper_basicauth_password: "{{ apigateway_rest_login_password }}"
      #     curl_wrapper_no_check_certs: "{{ apigateway_rest_no_check_certs }}"
      #     curl_wrapper_multipart_formdata_fields: "{{ keystore_keyalias_formdata_fields_item }}"
      #     curl_wrapper_headers_fields:
      #       "Accept": "application/json"
      #   with_items: "{{ rvar_apigateway_keystore_item.keyaliases }}"
      #   loop_control:
      #     loop_var: keystore_keyalias_formdata_fields_item

    # when: ansible_version.major < 2 or (ansible_version.major == 2 and ansible_version.minor <= 9)
