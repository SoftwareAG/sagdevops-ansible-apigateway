---

################################################################
## Load the needed vars
################################################################

- name: Load vars
  hosts: local
  tasks:
    - name: Include all vars files
      include_vars:
        file: "{{ item }}"
      with_fileglob:
        - ./vars/common.yaml
        - ./vars/lookup_envs.yaml
        - ./vars/apigateway_configs_admin.yaml
        - ./vars/apigateway_configs_usermgt.yaml
        - ./vars/apigateway_configs_sslcerts.yaml
        - ./vars/apigateway_configs_ports.yaml
        - ./vars/apigateway_configs_api_artifacts.yaml
        - ./vars/apigateway_configs_apiportal.yaml

################################################################
## waiting for service running via port checking
################################################################

- name: Check the ports to ensure valid state
  hosts: local
  become: true
  tasks:
    - include_role:
        name: check-remote-ports
      vars:
        rvar_validation_host: "{{ vars_portscheck_host }}"
        rvar_validation_ports: "{{ vars_portscheck_ports }}"
        rvar_validation_ports_timeout: "{{ vars_portscheck_ports_timeout }}"
        rvar_async_timeout: "{{ common_async_timeout }}"
        rvar_async_poll: "{{ common_async_poll }}"
        rvar_async_retries: "{{ common_async_retries }}"
        rvar_async_delay: "{{ common_async_delay }}"

################################################################
## set configs via REST APIs
################################################################

- name: Setting Misc Apigateway Server configs via Apigateway Management REST APIs - runs only ONCE, against one of the server
  hosts: local
  run_once: true
  vars:
    apigateway_rest_protocol: "{{ vars_apigateway_rest_protocol }}"
    apigateway_rest_host: "{{ vars_apigateway_rest_host }}"
    apigateway_rest_port: "{{ vars_apigateway_rest_port }}"
    apigateway_rest_no_check_certs: "{{ vars_apigateway_rest_no_check_certs }}"

  tasks:

    - name: Self Reset Apigateway REST API User password
      include_role:
        name: apigateway-rest-configurator
        apply:
          ignore_errors: yes
      vars:
        configs_action: update-user-password
        configs_enabled: "true"
        apigateway_rest_login_username: "{{ vars_apigateway_rest_login_username }}"
        apigateway_rest_login_password: "{{ vars_apigateway_rest_login_password_old }}"
        apigateway_update_user_username: "{{ vars_apigateway_rest_login_username }}"
        apigateway_update_user_password: "{{ vars_apigateway_rest_login_password }}"
      
    ## this is to make sure we regather the facts and vars etc
    ## So the roles can get the right new user/pass values
    - setup:
      tags: always

    ## re-set the user/password for all the REST calls following this
    - name: Set the REST user/password vars with the new password
      set_fact:
        apigateway_rest_login_username: "{{ vars_apigateway_rest_login_username }}"
        apigateway_rest_login_password: "{{ vars_apigateway_rest_login_password }}"
      tags: always

    - include_role:
        name: apigateway-rest-configurator
        apply:
          ignore_errors: "{{ vars_apigateway_usermgt_ignore_errors }}"
      vars:
        configs_action: set-users
        configs_enabled: "{{ envvars_apigateway_usermgt_enabled }}"
        apigateway_configparams_rest_usermgt_users: "{{ vars_apigateway_usermgt_users }}"
      tags:
        - configs_users

    - include_role:
        name: apigateway-rest-configurator
        apply:
          ignore_errors: "{{ vars_apigateway_usermgt_ignore_errors }}"
      vars:
        configs_action: set-groups
        configs_enabled: "{{ envvars_apigateway_usermgt_enabled }}"
        apigateway_configparams_rest_usermgt_groups: "{{ vars_apigateway_usermgt_groups }}"
      tags:
        - configs_groups

    - include_role:
        name: apigateway-rest-configurator
        apply:
          ignore_errors: "{{ vars_apigateway_usermgt_ignore_errors }}"
      vars:
        configs_action: set-accessprofiles
        configs_enabled: "{{ envvars_apigateway_usermgt_enabled }}"
        apigateway_configparams_rest_usermgt_accessprofiles: "{{ vars_apigateway_usermgt_accessprofiles }}"
      tags:
        - configs_accessprofiles

    - include_role:
        name: apigateway-rest-configurator
        apply:
          ignore_errors: "{{ vars_apigateway_extended_settings_ignore_errors }}"
      vars:
        configs_action: set-extended-settings-coregateway
        configs_enabled: "{{ envvars_apigateway_extended_settings_enabled }}"
        webmethods_apigateway_extended_settings_coregateway_extended_keys: "{{ vars_apigateway_extended_settings_coregateway_extended_keys }}"
      tags:
        - configs_extended_settings

    - include_role:
        name: apigateway-rest-configurator
        apply:
          ignore_errors: "{{ vars_apigateway_ldap_ignore_errors }}"
      vars:
        configs_action: set-ldap-settings
        configs_enabled: "{{ envvars_apigateway_ldap_enabled }}"
        webmethods_apigateway_ldap_settings: "{{ vars_apigateway_ldap_settings }}"
      tags:
        - configs_ldap_settings

    - include_role:
        name: apigateway-rest-configurator
        apply:
          ignore_errors: "{{ vars_apigateway_loadbalancer_ignore_errors }}"
      vars:
        configs_action: set-loadbalancer-urls
        configs_enabled: "{{ envvars_apigateway_loadbalancer_enabled }}"
        webmethods_apigateway_loadbalancers_http_urls: "{{ vars_apigateway_loadbalancers_http_urls }}"
        webmethods_apigateway_loadbalancers_https_urls: "{{ vars_apigateway_loadbalancers_https_urls }}"
        webmethods_apigateway_loadbalancers_websocket_urls: "{{ vars_apigateway_loadbalancers_websocket_urls }}"
        webmethods_apigateway_loadbalancers_webapp_url: "{{ vars_apigateway_loadbalancers_webapp_url }}"
      tags:
        - configs_loadbalancer_urls

    ## in this apigateway to apiportal config section, we load the role based on the portaltype
    - debug:
        msg: "WARN - value for vars_apigateway_portalgateway_portaltype is not defined or empty...will not configure the apiportal connection!"
      when: vars_apigateway_portalgateway_portaltype is not defined or vars_apigateway_portalgateway_portaltype == ""

    - include_role:
        name: apigateway-rest-configurator
        apply:
          ignore_errors: "{{ vars_apigateway_portalgateway_ignore_errors }}"
      vars:
        configs_action: set-apiportal-connect
        configs_enabled: "{{ envvars_apigateway_portalgateway_enabled }}"
        webmethods_apigateway_portalgateway: "{{ vars_apigateway_portalgateway_apiportal }}"
      when: (vars_apigateway_portalgateway_portaltype | lower) == "apiportal"
      tags:
        - configs_apiportal_connect

    - include_role:
        name: apigateway-rest-configurator
        apply:
          ignore_errors: "{{ vars_apigateway_portalgateway_ignore_errors }}"
      vars:
        configs_action: set-apiportal-connect
        configs_enabled: "{{ envvars_apigateway_portalgateway_enabled }}"
        webmethods_apigateway_portalgateway: "{{ vars_apigateway_portalgateway_devportal }}"
      when: (vars_apigateway_portalgateway_portaltype | lower) == "devportal"
      tags:
        - configs_apiportal_connect

    - include_role:
        name: apigateway-rest-configurator
        apply:
          ignore_errors: "{{ vars_apigateway_promotions_stages_ignore_errors }}"
      vars:
        configs_action: set-promotion-stages
        configs_enabled: "{{ envvars_apigateway_promotions_stages_enabled }}"
        webmethods_apigateway_promotions_stages: "{{ vars_apigateway_promotions_stages }}"
      tags:
        - configs_promotion_stages

    - include_role:
        name: apigateway-rest-configurator
        apply:
          ignore_errors: "{{ vars_apigateway_aliases_ignore_errors }}"
      vars:
        configs_action: set-aliases
        configs_enabled: "{{ envvars_apigateway_aliases_enabled }}"
        rvar_apigateway_aliases: "{{ vars_apigateway_aliases }}"
      tags:
        - configs_aliases

    - include_role:
        name: apigateway-rest-configurator
        apply:
          ignore_errors: "{{ vars_apigateway_archive_imports_ignore_errors }}"
      vars:
        configs_action: import-archives
        configs_enabled: "{{ envvars_apigateway_archive_imports_enabled }}"
        rvar_apigateway_archive_imports: "{{ vars_apigateway_archives }}"
      tags:
        - configs_archives

    - include_role:
        name: apigateway-rest-configurator
        apply:
          ignore_errors: "{{ vars_apigateway_applications_ignore_errors }}"
      vars:
        configs_action: set-applications
        configs_enabled: "{{ envvars_apigateway_applications_enabled }}"
        rvar_apigateway_applications: "{{ vars_apigateway_applications }}"
      tags:
        - configs_applications

    - include_role:
        name: apigateway-rest-configurator
        apply:
          ignore_errors: "{{ vars_apigateway_plans_ignore_errors }}"
      vars:
        configs_action: set-plans
        configs_enabled: "{{ envvars_apigateway_plans_enabled }}"
        rvar_apigateway_plans: "{{ vars_apigateway_plans }}"
      tags:
        - configs_plans

    - include_role:
        name: apigateway-rest-configurator
        apply:
          ignore_errors: "{{ vars_apigateway_packages_ignore_errors }}"
      vars:
        configs_action: set-packages
        configs_enabled: "{{ envvars_apigateway_packages_enabled }}"
        rvar_apigateway_packages: "{{ vars_apigateway_packages }}"
      tags:
        - configs_packages

    - include_role:
        name: apigateway-rest-configurator
        apply:
          ignore_errors: "{{ vars_apigateway_apis_publish_groups_ignore_errors }}"
      vars:
        configs_action: publish-apis-groups
        configs_enabled: "{{ envvars_apigateway_apis_publish_groups_enabled }}"
        rvar_apigateway_apis_publish_groups: "{{ vars_apigateway_apis_publish_groups }}"
      tags:
        - publish_apis

    - include_role:
        name: apigateway-rest-configurator
        apply:
          ignore_errors: "{{ vars_apigateway_packages_publish_groups_ignore_errors }}"
      vars:
        configs_action: publish-packages-groups
        configs_enabled: "{{ envvars_apigateway_packages_publish_groups_enabled }}"
        rvar_apigateway_packages_publish_groups: "{{ vars_apigateway_packages_publish_groups }}"
      tags:
        - publish_apis